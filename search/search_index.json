{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Gitsheet, l'anti-s\u00e8che git qui peut rester toujours ouverte dans ton navigateur.</p>"},{"location":"Github/","title":"Github","text":""},{"location":"azure_devops/","title":"Azure Devops","text":""},{"location":"basic_commands/","title":"Basic commands","text":"<p>Configuration des globales variables</p> <pre><code>git config --global user.name 'Quentin'\ngit config --global user.email 'quentin@legay.com'\n</code></pre> <p>A faire qu'une seul fois apr\u00e8s l'installation de Git</p> <p>Les commandes populaires :</p> <pre><code>git clone\ngit add *\ngit commit -am \"fix issue X\"\ngit status\ngit push\n</code></pre>"},{"location":"common_questions/","title":"Diff\u00e9rence entre git fetch et git pull ?","text":"<ul> <li> <p><code>git fetch</code> : R\u00e9cup\u00e8re les derni\u00e8res modifications depuis le d\u00e9p\u00f4t distant sans les fusionner automatiquement avec la branche actuelle. Il met \u00e0 jour uniquement les r\u00e9f\u00e9rences locales des branches distantes.</p> </li> <li> <p><code>git pull</code> : R\u00e9cup\u00e8re les derni\u00e8res modifications depuis le d\u00e9p\u00f4t distant et les fusionne automatiquement avec la branche actuelle, combinant ainsi les commandes <code>git fetch</code> et <code>git merge</code>.</p> </li> </ul>"},{"location":"common_questions/#lhistoire-de-master-et-de-main","title":"L'Histoire de \"master\" et de \"main\"","text":"<ul> <li>\"master\" a \u00e9t\u00e9 le nom par d\u00e9faut de la branche principale dans Git depuis sa cr\u00e9ation en 2005, sans connotation sociale particuli\u00e8re.</li> <li>En 2020, suite aux mouvements sociaux et \u00e0 un effort pour un langage plus inclusif, GitHub et d'autres plateformes ont adopt\u00e9 \"main\" comme nouveau nom par d\u00e9faut pour la branche principale.</li> <li>Aujourd'hui, \"main\" est couramment utilis\u00e9 pour les nouveaux projets, bien que certains d\u00e9p\u00f4ts plus anciens utilisent encore \"master\".</li> </ul>"},{"location":"common_questions/#comprendre-le-dossier-git","title":"Comprendre le dossier .git","text":"<p>Le dossier <code>.git</code> est crucial pour un d\u00e9p\u00f4t Git, contenant les \u00e9l\u00e9ments n\u00e9cessaires pour g\u00e9rer l'historique et la configuration d'un projet. Voici les principaux fichiers et dossiers qu'il contient :</p> <ul> <li><code>HEAD</code> : Pointeur vers la branche active actuelle.</li> <li><code>config</code> : Configuration sp\u00e9cifique au d\u00e9p\u00f4t (utilisateur, branches, etc.).</li> <li><code>description</code> : Description du d\u00e9p\u00f4t, utilis\u00e9 par des interfaces comme GitWeb.</li> <li><code>index</code> : Zone de transit (staging area) pour les changements avant commit.</li> <li><code>logs/</code> : Journaux des d\u00e9placements de <code>HEAD</code> et des branches.</li> <li><code>objects/</code> : Contient tous les objets Git (commits, arbres, blobs) sous forme compress\u00e9e.</li> <li><code>refs/</code> : R\u00e9f\u00e9rences aux branches, tags, et autres pointeurs vers des commits.</li> <li><code>info/</code> : Informations suppl\u00e9mentaires, comme des exclusions de commit.</li> <li><code>hooks/</code> : Scripts d\u00e9clench\u00e9s par certains \u00e9v\u00e9nements Git (ex: <code>pre-commit</code>).</li> <li><code>packed-refs</code> : Fichier compressant les r\u00e9f\u00e9rences pour optimiser l'acc\u00e8s.</li> </ul> <p>Ces composants font de <code>.git</code> le c\u0153ur du suivi de version dans Git.</p>"},{"location":"common_questions/#comprendre-le-fichier-gitignore","title":"Comprendre le fichier .gitignore","text":"<p>Le fichier <code>.gitignore</code> indique \u00e0 Git quels fichiers ou dossiers ne doivent pas \u00eatre suivis ou inclus dans le contr\u00f4le de version. Il est plac\u00e9 \u00e0 la racine du d\u00e9p\u00f4t ou dans des sous-dossiers sp\u00e9cifiques.</p> <p>Exemple :</p> <ul> <li>Ignorer tous les fichiers temporaires cr\u00e9\u00e9s par un \u00e9diteur de texte : *.tmp</li> <li>Ignorer les fichiers de configuration secrets : .env</li> </ul>"},{"location":"common_questions/#pourquoi-travailler-avec-des-branches-git","title":"Pourquoi travailler avec des branches git ?","text":"<p>Travailler avec des branches Git permet d'isoler diff\u00e9rentes t\u00e2ches de d\u00e9veloppement, de collaborer sans conflits, et de g\u00e9rer les versions du code de mani\u00e8re organis\u00e9e. Les branches facilitent l'exp\u00e9rimentation, la revue de code, et le d\u00e9ploiement progressif des fonctionnalit\u00e9s. Elles aident \u00e9galement \u00e0 maintenir un historique propre et permettent un r\u00e9tablissement facile en cas de probl\u00e8me.</p>"},{"location":"conventions/","title":"Conventions","text":""},{"location":"conventions/#utilisation-de-langlais","title":"Utilisation de l'anglais","text":"<p>Utiliser l'anglais dans les messages de commit facilite la collaboration internationale, car c'est la langue universelle du d\u00e9veloppement logiciel. Cela garantit que tous les membres de l'\u00e9quipe, quelle que soit leur langue maternelle, peuvent comprendre les modifications. De plus, l'anglais est standard dans la documentation technique, assurant coh\u00e9rence et professionnalisme.</p>"},{"location":"conventions/#conventionnal-commits","title":"Conventionnal commits","text":"<p>Les commits conventionnels sont un format standardis\u00e9 pour \u00e9crire les messages de commit, structur\u00e9 de mani\u00e8re \u00e0 faciliter la lisibilit\u00e9, la compr\u00e9hension et l'automatisation. Ils suivent une syntaxe pr\u00e9cise, g\u00e9n\u00e9ralement commen\u00e7ant par un type (comme feat pour une nouvelle fonctionnalit\u00e9 ou fix pour une correction de bug), suivi d'un r\u00e9sum\u00e9 concis des changements. Cette convention permet d'am\u00e9liorer la clart\u00e9 des historiques de version, de g\u00e9n\u00e9rer automatiquement des journaux de modifications (changelogs) et d'automatiser certaines parties du processus de d\u00e9veloppement.</p> <p>Exemples :</p> <ol> <li>feat: Add user login functionality</li> <li>fix: Correct typo in README</li> <li>docs: Update API documentation</li> <li>refactor: Simplify user authentication logic</li> <li>test: Add unit tests for login feature</li> <li>chore: Update dependencies</li> </ol>"},{"location":"install/","title":"Installation de git","text":"<p>Windows Linux MacOS </p>"},{"location":"install/#linux","title":"Linux","text":"Ubuntu/DebianCentOS/RHELFedora <pre><code>sudo apt update\nsudo apt install git\n</code></pre> <pre><code>sudo yum install git\n</code></pre> <pre><code>sudo dnf install git\n</code></pre>"},{"location":"install/#windows","title":"Windows","text":""},{"location":"install/#macos","title":"MacOS","text":"<p>to do...</p>"},{"location":"install/#variables-denvironnements","title":"Variables d'environnements","text":"<p>Sur Windows, il peut \u00eatre n\u00e9c\u00e9ssaire d'ajouter une variable d'environnement git pour pour que Git puisse \u00eatre accessible depuis n'importe quel terminal ou invite de commande sans avoir \u00e0 naviguer vers le r\u00e9pertoire d'installation de Git. Cela simplifie grandement l'utilisation quotidienne de Git.</p>"},{"location":"install/#1-ouvrir-les-parametres-systeme","title":"1. Ouvrir les Param\u00e8tres Syst\u00e8me","text":"<ul> <li>Clic droit sur l'ic\u00f4ne Ce PC ou Ordinateur sur le Bureau ou dans l'Explorateur de fichiers.</li> <li>Cliquez sur Param\u00e8tres avanc\u00e9s du syst\u00e8me.</li> <li>Dans l'onglet Propri\u00e9t\u00e9 syst\u00e8me, cliquez sur le bouton Variables d'environnement en bas.</li> </ul>"},{"location":"install/#2-modifier-les-variables-denvironnement","title":"2. Modifier les variables d'environnement","text":"<p>Dans la fen\u00eatre Variables d'environnement :</p> <ul> <li>Variables utilisateur : Affecte uniquement l'utilisateur actuel.</li> <li>Variables syst\u00e8me : Affecte tous les utilisateurs sur le syst\u00e8me.</li> </ul>"},{"location":"install/#modifier-une-variable","title":"Modifier une variable","text":"<ol> <li>S\u00e9lectionnez la variable que vous souhaitez modifier. Par exemple, si vous voulez modifier le <code>PATH</code> pour inclure un chemin vers Git.</li> <li>Cliquez sur Modifier.</li> <li>Dans la bo\u00eete de dialogue qui appara\u00eet, vous pouvez ajouter, modifier ou supprimer des valeurs.</li> </ol>"},{"location":"install/#ajouter-une-nouvelle-variable","title":"Ajouter une nouvelle variable","text":"<ol> <li>S\u00e9lectionner la variables syst\u00e8mes Path puis modifier la.</li> <li>Cliquer sur Nouveau puis ajouter le chemin o\u00f9 se trouve git (pour ma part : C:\\Program Files\\Git\\cmd)</li> <li>Cliquez sur OK pour enregistrer la nouvelle variable (2 fois).</li> </ol>"},{"location":"install/#4-verifier-les-modifications","title":"4. V\u00e9rifier les modifications","text":"<p>Apr\u00e8s avoir configur\u00e9 la variable, vous pouvez v\u00e9rifier que Git les utilise correctement :</p> <ol> <li>Ouvrez un terminal <code>cmd</code> ou <code>powershell</code>.</li> <li>Tapez <code>git</code> et v\u00e9rifier si cette commande vous retourne des instrutions Git (penser \u00e0 bien fermer et r\u00e9-ouvrir vos terminals cmd, powershell afin que la variable d'environnement puisse \u00eatre utilis\u00e9. Si ce n'est pas le cas, il faut recommencer l'op\u00e9ration.)</li> </ol>"},{"location":"misc_commands/","title":"Misc commands","text":"<p>Changer le remote d\u2019un repo</p> <pre><code>git remote set-url origin &lt;new_url&gt;\n</code></pre> <p>R\u00e9cup\u00e9rer les changements de la branche master origin sur sa branche :</p> <pre><code>git checkout master\ngit pull\ngit checkout myBranch\ngit merge master\n</code></pre> <p>Supprimer une branche locale</p> <pre><code>git branch -d &lt;nom_de_ma_branche&gt;\n</code></pre> <p>Modifier le message du dernier commit avant un push</p> <p>Pour modifier le message du dernier commit avant de pousser les modifications, utilise la commande suivante :</p> <pre><code>git commit --amend\n</code></pre> <p>Cela ouvrira l'\u00e9diteur de texte configur\u00e9 pour Git, o\u00f9 tu pourras modifier le message du dernier commit. Apr\u00e8s avoir modifi\u00e9 le message, enregistre et ferme l'\u00e9diteur.</p> <p>Ensuite, tu peux pousser le commit amend\u00e9 avec l'option --force (ou -f) pour forcer la mise \u00e0 jour sur le d\u00e9p\u00f4t distant :</p> <pre><code>git push --force\n</code></pre> <p>Attention</p> <p>Utilise la commande --force avec pr\u00e9caution, surtout si tu travailles en collaboration avec d'autres d\u00e9veloppeurs, car cela r\u00e9\u00e9crit l'historique Git et peut causer des probl\u00e8mes si d'autres personnes ont d\u00e9j\u00e0 tir\u00e9 les commits modifi\u00e9s.</p>"},{"location":"most_used_commands/","title":"D\u00e9marrer un repository","text":"<p>Cloner un repository : <pre><code>git clone https://github.com/quentinlegay/gitsheet.git\n</code></pre></p> <p>Initialiser un repository : <pre><code>git init\n</code></pre></p>"},{"location":"most_used_commands/#effectuer-des-changements","title":"Effectuer des changements","text":"<p>Ajoute tous les fichiers nouveaux ou modifi\u00e9s du r\u00e9pertoire courant au suivi de Git, les pr\u00e9parant pour le prochain commit : <pre><code>git add *\n</code></pre></p> <p>Enregistre les modifications suivies (staged) dans un nouveau commit avec un message \"fix issue X\", en ajoutant les modifications des fichiers d\u00e9j\u00e0 suivis (tracked) : <pre><code>git commit -am \"fix issue X\"\n</code></pre></p> <p>Envoie les commits locaux au d\u00e9p\u00f4t distant : <pre><code>git push\n</code></pre></p>"},{"location":"most_used_commands/#travailler-avec-des-branches","title":"Travailler avec des branches","text":"<p>Cr\u00e9ation d'une nouvelle branche nomm\u00e9e featureA et bascule imm\u00e9diatement sur celle-ci : <pre><code>git checkout -b featureA\n</code></pre></p> <p>R\u00e9cup\u00e9rer les modifications depuis un d\u00e9p\u00f4t distant et les fusionner avec la branche locale active. <pre><code>git pull &lt;remote&gt; &lt;branch&gt;\n</code></pre> Elle combine deux commandes Git en une :</p> <ol> <li><code>git fetch</code> : R\u00e9cup\u00e8re les nouveaux commits depuis le d\u00e9p\u00f4t distant.</li> <li><code>git merge</code> : Fusionne les modifications r\u00e9cup\u00e9r\u00e9es avec la branche courante.</li> </ol> <p>Cr\u00e9er une branche locale \u00e0 partir d'une branche distante (Si par exemple vous voulez r\u00e9cup\u00e9rer la branche distante feature/ma-branche) <pre><code>git checkout -b feature/ma-branche origin/feature/ma-branche\n</code></pre></p>"},{"location":"most_used_commands/#checker-son-repository","title":"Checker son repository","text":"<p>Affiche l'\u00e9tat actuel du d\u00e9p\u00f4t, montrant les modifications qui ont \u00e9t\u00e9 faites et celles qui sont pr\u00eates \u00e0 \u00eatre commises : <pre><code>git status\n</code></pre></p>"},{"location":"pull_requests/","title":"Pull requests","text":""},{"location":"pull_requests/#squash-commit","title":"squash commit","text":""},{"location":"remote_git/","title":"Remote git","text":"<p>List :</p> <ul> <li> <p>Azure Devops Services</p> </li> <li> <p>Azure Devops Server</p> </li> <li> <p>Github</p> </li> <li> <p>Gitlab</p> </li> <li> <p>Gitea (selfhosted and cloud)</p> </li> <li> <p>Froggit</p> </li> </ul>"},{"location":"resources/","title":"Learn","text":"<p>Ici, des ressources pour monter en comp\u00e9tences sur git.</p> <ul> <li> <p>Site Learn-git par Yasoob Khalid</p> </li> <li> <p>Cours en ligne gratuit G\u00e9rez du code avec git et github par Open Class Room</p> </li> <li> <p>Et merde, Git!?!</p> </li> <li> <p>Jeux pour apprendre les branches de Git learn Git Branching</p> </li> <li> <p>Outil Gitignore.io</p> </li> </ul>"},{"location":"ssh_key/","title":"Echange de cl\u00e9 SSH","text":"<p>Pour pouvoir cloner un repositorie priv\u00e9e, il faut taper son identifiant et mot de passe \u00e0 chaque fois, sauf si vous utiliser l\u2019authentification par cl\u00e9 ssh.</p> <p>Comment configurer l\u2019\u00e9change de cl\u00e9 ssh ? \u2026</p>"},{"location":"ssh_key/#1-generer-une-paire-de-cle-ssh-sur-votre-environnement-vers-lequel-vous-allez-git-cloner","title":"1. G\u00e9n\u00e9rer une paire de cl\u00e9 ssh sur votre environnement vers lequel vous allez git cloner","text":"<pre><code>ssh-keygen -t ecdsa -b 521\n</code></pre> <p>Un message indique o\u00f9 se trouve la cl\u00e9 priv\u00e9e et la cl\u00e9 publique g\u00e9n\u00e9r\u00e9e (souvent dans ~/.ssh/id_ecdsa*)</p>"},{"location":"ssh_key/#2-transfert-de-la-cle-publique-sur-une-plateforme-remote-git-github-gitlab-azure-devops","title":"2. Transfert de la cl\u00e9 publique sur une plateforme remote Git (Github, Gitlab, Azure devops...):","text":""},{"location":"tips/","title":"Alias git","text":"<p>2 m\u00e9thodes (git bash et git)</p>"},{"location":"tips/#windows","title":"Windows","text":""},{"location":"tips/#linux","title":"Linux","text":""}]}